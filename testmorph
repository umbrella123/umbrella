local Morphling = {}

morph.optionEnable = Menu.AddOptionBool({"Hero Specific", "Morph"}, "Enable", false)
morph.AutoShift = Menu.AddOptionBool({"Hero Specific", "Morph","AutoShift"}, "Enable", false)
morph.AdditionalAbilities = Menu.AddOptionBool({"Hero Specific", "Morph","AutoShift"}, "[unstable]additionalAbilities", false)
Morphling.autoLifeSteal = Menu.AddOption({"Hero Specific","Morphling"},"Auto Life Steal", "auto KS using strike or ethereal blade, \n also show if can kill an enemy")

morph.myHero = nil
morph.players = {}
morph.ability = {}
Morphling.HpThreshold = 0.25


function Morphling.AutoKill(myHero)
  local myMana = NPC.GetMana(myHero)

	local wave = NPC.GetAbilityByIndex(myHero, 0)
	local waveLevel = Ability.GetLevel(wave)
	local waveDamage = (waveLevel > 0) and 100+75*(waveLevel-1) or 0

	local strike = NPC.GetAbilityByIndex(myHero, 1)
	local strikeCastRange = Ability.GetCastRange(strike)
	local strikeDamage = getStrikeDamamge(myHero)
	
	local ethereal = NPC.GetItem(myHero, "item_ethereal_blade", true)
	local etherealCastRange = ethereal and Ability.GetCastRange(ethereal) or 0
	local etherealDamge = getEtherealDamage(myHero, ethereal)

	if not wave or not Ability.IsCastable(wave, myMana) then waveDamage = 0 end
	if not strike or not Ability.IsCastable(strike, myMana) then strikeDamage = 0 end
	if not ethereal or not Ability.IsCastable(ethereal, myMana) then etherealDamge = 0 end

	for i = 1, Heroes.Count() do
		local enemy = Heroes.Get(i)
		if not NPC.IsIllusion(enemy) and not Entity.IsSameTeam(myHero, enemy) and not Entity.IsDormant(enemy) and Entity.IsAlive(enemy) then
			local physicalDamage = NPC.GetDamageMultiplierVersus(myHero, enemy) * NPC.GetTrueDamage(myHero) * NPC.GetArmorDamageMultiplier(enemy)
			local trueWaveDamage = waveDamage * NPC.GetMagicalArmorDamageMultiplier(enemy)
			local trueStrikeDamage = strikeDamage * NPC.GetMagicalArmorDamageMultiplier(enemy)
			local trueEtherealDamage = etherealDamge * NPC.GetMagicalArmorDamageMultiplier(enemy)

			local enemyHp = Entity.GetHealth(enemy)
			local enemyHpLeft = enemyHp - trueStrikeDamage - trueEtherealDamage - trueWaveDamage
			local hitsLeft = math.ceil(enemyHpLeft / physicalDamage)

			local pos = Entity.GetAbsOrigin(enemy)
			local x, y, visible = Renderer.WorldToScreen(pos)

			-- red : can kill; green : cant kill
			if enemyHp - trueStrikeDamage - trueEtherealDamage <= 0 then
				if ethereal and Ability.IsCastable(ethereal, myMana) and NPC.IsEntityInRange(enemy, myHero, etherealCastRange) and not NPC.HasState(enemy, Enum.ModifierState.MODIFIER_STATE_MAGIC_IMMUNE) then
					Ability.CastTarget(ethereal, enemy)
					sleep(0.02)
				end
				if strike and Ability.IsCastable(strike, myMana) and NPC.IsEntityInRange(enemy, myHero, strikeCastRange) and not NPC.HasState(enemy, Enum.ModifierState.MODIFIER_STATE_MAGIC_IMMUNE) then
					Ability.CastTarget(strike, enemy)
					sleep(0.02)
				end
				Renderer.SetDrawColor(255, 0, 0, 255)
				Renderer.DrawTextCentered(Morphling.font, x, y, "Kill", 1)
			elseif enemyHpLeft <= 0 then
				Renderer.SetDrawColor(255, 0, 0, 255)
				Renderer.DrawTextCentered(Morphling.font, x, y, "Kill", 1)
			else
				Renderer.SetDrawColor(0, 255, 0, 255)
				Renderer.DrawTextCentered(Morphling.font, x, y, hitsLeft, 1)
			end

		end -- end of if statement
	end -- enf of for loop

end


morph.defaultAbilities = {
	{"npc_dota_hero_axe", "axe_berserkers_call", 300},
	{"npc_dota_hero_tidehunter", "tidehunter_ravage", 1250},
	{"npc_dota_hero_enigma", "enigma_black_hole", 720},
	{"npc_dota_hero_magnataur", "magnataur_reverse_polarity", 430},
	{"npc_dota_hero_slardar", "slardar_slithereen_crush", 355},
	{"npc_dota_hero_centaur", "centaur_hoof_stomp", 345}

--	{"npc_dota_hero_batrider", "batrider_flaming_lasso", 170},
--	{"npc_dota_hero_faceless_void", "faceless_void_chronosphere", 1100},
--	{"npc_dota_hero_legion_commander", "legion_commander_duel", 150},
--	{"npc_dota_hero_beastmaster", "beastmaster_primal_roar", 600},
--	{"npc_dota_hero_sven", "sven_storm_bolt", 600},
--	{"npc_dota_hero_bane", "bane_fiends_grip", 625},
--	{"npc_dota_hero_pudge", "pudge_dismember", 160},
--	{"npc_dota_hero_doom_bringer", "doom_bringer_doom", 550},
--	{"npc_dota_hero_disruptor", "disruptor_static_storm", 1450}
}
morph.additionalAbilities = {
	{"npc_dota_hero_axe", "axe_berserkers_call", 300},
	{"npc_dota_hero_tidehunter", "tidehunter_ravage", 1250},
	{"npc_dota_hero_enigma", "enigma_black_hole", 720},
	{"npc_dota_hero_magnataur", "magnataur_reverse_polarity", 430},
	{"npc_dota_hero_slardar", "slardar_slithereen_crush", 355},
	{"npc_dota_hero_centaur", "centaur_hoof_stomp", 345},

	--------------------------------------------------------------------

	{"npc_dota_hero_batrider", "batrider_flaming_lasso", 170},
	{"npc_dota_hero_faceless_void", "faceless_void_chronosphere", 1100},
	{"npc_dota_hero_legion_commander", "legion_commander_duel", 150},
	{"npc_dota_hero_pudge", "pudge_dismember", 160}
}


function morph.OnUpdate()
	if not Menu.IsEnabled(morph.optionEnable) or not Engine.IsInGame() or not Heroes.GetLocal() then 
		for i = 0, 10 do
      		if morph.players[i] then
        		Menu.RemoveOption(morph.players[i]) 
        		morph.players[i] = nil
      end
    end
		return end
	morph.myHero = Heroes.GetLocal()
	if NPC.GetUnitName(morph.myHero) ~= "npc_dota_hero_morphling" then return end
	local FHeroes = Heroes.GetAll()
	if Menu.IsEnabled(morph.AutoShift) then
	if not Entity.IsAlive(morph.myHero) or NPC.IsStunned(morph.myHero) or NPC.IsSilenced(morph.myHero) then return end
	local shift = NPC.GetAbilityByIndex(morph.myHero, 4)
	if Menu.IsEnabled(morph.AdditionalAbilities) then
		morph.ability = morph.additionalAbilities
	else 
		morph.ability = morph.defaultAbilities
	end
	for _,v in pairs(FHeroes) do
		if v and Entity.IsHero(v) and Entity.IsAlive(v) and not Entity.IsSameTeam(morph.myHero, v) and not Entity.IsDormant(v) and not NPC.IsIllusion(v) then
			for i,k in pairs(morph.ability) do
				if NPC.GetUnitName(v) == k[1] then
					local p1 = NPC.GetAbility(v, k[2])
					if p1 ~= (nil or 0) and Ability.IsInAbilityPhase(p1) then								 
						local p2 = Ability.GetCastPoint(p1)
						if NPC.IsEntityInRange(morph.myHero, v, k[3]) then
							if not Ability.GetToggleState(shift) then
								Ability.Toggle(shift)
										return
							end
						end
					end
				end
			end		
		end
	end
	end
